===== D:\Development\court_secretary\court_secretary\utils\date_utils.py =====
from datetime import datetime
from typing import Union
from django.utils import timezone
from django.core.exceptions import ValidationError

def parse_date(date_str: str, format: str = '%Y-%m-%d') -> datetime.date:
    """Парсит строку даты в объект datetime.date."""
    try:
        return datetime.strptime(date_str, format).date()
    except ValueError:
        raise ValidationError(f"Неверный формат даты. Ожидается {format}.")

def validate_date_range(start_date: datetime.date, end_date: Union[datetime.date, None]) -> None:
    """Проверяет, что конечная дата не раньше начальной."""
    if end_date and start_date and end_date < start_date:
        raise ValidationError("Дата окончания не может быть раньше даты начала.")

def get_min_date() -> str:
    """Возвращает минимальную допустимую дату в формате строки."""
    return '2024-08-14'  # Фиксированная минимальная дата из проекта

def is_date_valid(date: datetime.date, min_date: str = get_min_date()) -> bool:
    """Проверяет, что дата не раньше минимальной."""
    return date >= datetime.strptime(min_date, '%Y-%m-%d').date()
===== D:\Development\court_secretary\court_secretary\__init__.py =====
from .celery import app as celery_app

__all__ = ('celery_app',)
===== D:\Development\court_secretary\court_secretary\asgi.py =====
"""
ASGI config for court_secretary project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'court_secretary.settings')

application = get_asgi_application()
===== D:\Development\court_secretary\court_secretary\celery.py =====
import os
from celery import Celery

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'court_secretary.settings')

app = Celery('court_secretary')

app.config_from_object('django.conf:settings', namespace='CELERY')

app.autodiscover_tasks()
===== D:\Development\court_secretary\court_secretary\settings.py =====
from pathlib import Path
import os

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-yfo)%$dtcdynbu#+te4as-wo2j34x-p#m-j@!w!7xj$weq+kw+'
DEBUG = True
ALLOWED_HOSTS = ['109.120.178.123', 'localhost']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'web',
    'parser',
    'summary',
    'judges',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'court_secretary.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'court_secretary_db',
        'USER': 'court_user',
        'PASSWORD': 'court_password',
        'HOST': 'db',
        'PORT': '5432',
    }
}

CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CELERY_BEAT_SCHEDULE = {
    'auto-parse': {
        'task': 'web.tasks.auto_parse_task',
        'schedule': 60.0,  # Интервал по умолчанию в секундах (будет обновляться)
    },
}

STATIC_URL = '/static/'
STATICFILES_DIRS = ['static']
STATIC_ROOT = '/app/staticfiles'

SCHEDULED_PARSING_INTERVAL = 3600
FORUM_URL = "https://forum.gta5rp.com/forums/federalnyj-sud.1745/"
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
URGENT_THREAD_THRESHOLD_HOURS = 50
TRIAL_DURATION_THRESHOLD_HOURS = 120

# Логирование
LOG_DIR = BASE_DIR / 'logs'
LOG_FILE = LOG_DIR / 'app.log'

if not LOG_DIR.exists():
    os.makedirs(LOG_DIR)
if not LOG_FILE.exists():
    LOG_FILE.touch()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': str(LOG_FILE),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'court_secretary': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
===== D:\Development\court_secretary\court_secretary\urls.py =====
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include(('web.urls', 'web'), namespace='web')),  # Главная страница и базовые функции
    path('summary/', include(('summary.urls', 'summary'), namespace='summary')),  # Сводная таблица
    path('judges/', include(('judges.urls', 'judges'), namespace='judges')),  # Управление судьями
]
===== D:\Development\court_secretary\court_secretary\wsgi.py =====
"""
WSGI config for court_secretary project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'court_secretary.settings')

application = get_wsgi_application()
===== D:\Development\court_secretary\judges\__init__.py =====
===== D:\Development\court_secretary\judges\admin.py =====
from django.contrib import admin

# Register your models here.
===== D:\Development\court_secretary\judges\apps.py =====
from django.apps import AppConfig


class JudgesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'judges'
===== D:\Development\court_secretary\judges\forms.py =====
from django import forms
from .models import Judge, EmploymentHistory
from court_secretary.utils.date_utils import validate_date_range, get_min_date

class JudgeForm(forms.ModelForm):
    """Форма для управления судьями."""
    class Meta:
        model = Judge
        fields = ['full_name', 'forum_account', 'discord_id', 'telegram', 'email', 'additional_info']
        labels = {
            'full_name': 'ФИО',
            'forum_account': 'Форумный аккаунт',
            'discord_id': 'ID Discord',
            'telegram': 'Telegram',
            'email': 'Почта',
            'additional_info': 'Дополнительно',
        }
        widgets = {
            'additional_info': forms.Textarea(attrs={'rows': 3}),
        }

class EmploymentHistoryForm(forms.ModelForm):
    """Форма для истории приёма/увольнения."""
    hire_date = forms.DateField(
        widget=forms.DateInput(attrs={
            'type': 'date',
            'class': 'custom-date-input',
            'min': get_min_date(),
        }),
        label="Дата приёма на работу",
        input_formats=['%Y-%m-%d'],
    )
    dismissal_date = forms.DateField(
        widget=forms.DateInput(attrs={
            'type': 'date',
            'class': 'custom-date-input',
            'min': get_min_date(),
        }),
        label="Дата увольнения",
        required=False,
        input_formats=['%Y-%m-%d'],
    )

    class Meta:
        model = EmploymentHistory
        fields = ['hire_date', 'dismissal_date']

    def clean(self):
        """Валидация дат."""
        cleaned_data = super().clean()
        hire_date = cleaned_data.get('hire_date')
        dismissal_date = cleaned_data.get('dismissal_date')
        validate_date_range(hire_date, dismissal_date)
        return cleaned_data
===== D:\Development\court_secretary\judges\models.py =====
from django.db import models
from django.core.validators import RegexValidator

class Judge(models.Model):
    """Модель судьи."""
    full_name = models.CharField(max_length=255, verbose_name="ФИО")
    forum_account = models.CharField(max_length=100, verbose_name="Форумный аккаунт")
    discord_id = models.CharField(
        max_length=18, blank=True, verbose_name="ID Discord",
        validators=[RegexValidator(r'^\d{17,18}$', 'Неверный формат ID Discord')]
    )
    telegram = models.CharField(max_length=100, blank=True, verbose_name="Telegram")
    email = models.EmailField(blank=True, verbose_name="Почта")
    additional_info = models.TextField(blank=True, verbose_name="Дополнительно")

    def __str__(self):
        return self.full_name

    class Meta:
        verbose_name = "Судья"
        verbose_name_plural = "Судьи"
        indexes = [
            models.Index(fields=['forum_account']),
        ]

class EmploymentHistory(models.Model):
    """Модель истории приёма/увольнения."""
    judge = models.ForeignKey(Judge, related_name='employment_history', on_delete=models.CASCADE, verbose_name="Судья")
    hire_date = models.DateField(verbose_name="Дата приёма на работу", db_index=True)
    dismissal_date = models.DateField(null=True, blank=True, verbose_name="Дата увольнения", db_index=True)

    class Meta:
        verbose_name = "История приёма/увольнения"
        verbose_name_plural = "История приёмов/увольнений"
        indexes = [
            models.Index(fields=['hire_date', 'dismissal_date']),
        ]
===== D:\Development\court_secretary\judges\services.py =====
from django.db.models import Q
from web.models import ForumThread
from .models import Judge
import logging

logger = logging.getLogger('court_secretary')

class JudgeService:
    """Сервис для управления судьями и обновления ведущих судей в тредах."""
    @staticmethod
    def update_leading_judge_for_threads() -> None:
        """Обновляет ведущего судью для всех тредов."""
        try:
            judges = Judge.objects.prefetch_related('employment_history')
            judge_periods = {}
            for judge in judges:
                for history in judge.employment_history.all():
                    judge_periods.setdefault(judge.forum_account, []).append(
                        (history.hire_date, history.dismissal_date)
                    )
            
            threads = ForumThread.objects.prefetch_related('messages')
            for thread in threads:
                for message in thread.messages.all():
                    if message.author in judge_periods:
                        for hire_date, dismissal_date in judge_periods[message.author]:
                            msg_date = message.posted_at.date()
                            if msg_date >= hire_date and (dismissal_date is None or msg_date <= dismissal_date):
                                thread.leading_judge = Judge.objects.get(forum_account=message.author).full_name
                                thread.save()
                                logger.info(f"Updated leading judge for thread {thread.url} to {thread.leading_judge}")
                                break
                        if thread.leading_judge:
                            break
        except Exception as e:
            logger.error(f"Ошибка в update_leading_judge_for_threads: {e}")
            raise
===== D:\Development\court_secretary\judges\tests.py =====
from django.test import TestCase

# Create your tests here.
===== D:\Development\court_secretary\judges\urls.py =====
from django.urls import path
from . import views

app_name = 'judges'

urlpatterns = [
    path('', views.judges_list, name='judges_list'),
    path('add/', views.judge_add, name='judge_add'),
    path('edit/<int:judge_id>/', views.judge_edit, name='judge_edit'),
    path('delete/<int:judge_id>/', views.judge_delete, name='judge_delete'),
    path('history/delete/<int:pk>/', views.employment_history_delete, name='employment_history_delete'),
]
===== D:\Development\court_secretary\judges\utils.py =====
from .services import JudgeService

def update_leading_judge_for_threads():
    JudgeService.update_leading_judge_for_threads()
===== D:\Development\court_secretary\judges\views.py =====
from django.shortcuts import render, redirect, get_object_or_404
from django.forms import modelformset_factory
from django.contrib import messages
from django.views.decorators.csrf import csrf_protect
from django.db.models import Q
from django.core.paginator import Paginator
from django.urls import reverse
from .models import Judge, EmploymentHistory
from .forms import JudgeForm, EmploymentHistoryForm
from .services import JudgeService

def judges_list(request):
    """Отображает список судей с пагинацией."""
    query = request.GET.get('q', '')
    judges = Judge.objects.filter(
        Q(full_name__icontains=query) | Q(forum_account__icontains=query)
    ).prefetch_related('employment_history')
    paginator = Paginator(judges, 9)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    return render(request, 'judges/judges_list.html', {'page_obj': page_obj, 'query': query})

def judge_add(request):
    """Добавляет нового судью."""
    EmploymentHistoryFormSet = modelformset_factory(EmploymentHistory, form=EmploymentHistoryForm, extra=1, can_delete=True)
    if request.method == 'POST':
        form = JudgeForm(request.POST)
        formset = EmploymentHistoryFormSet(request.POST)
        if form.is_valid() and formset.is_valid():
            judge = form.save()
            for f in formset:
                if f.cleaned_data and not f.cleaned_data.get('DELETE', False):
                    history = f.save(commit=False)
                    history.judge = judge
                    history.save()
            JudgeService.update_leading_judge_for_threads()
            messages.success(request, "Судья успешно добавлен.")
            return redirect('judges:judges_list')
    else:
        form = JudgeForm()
        formset = EmploymentHistoryFormSet(queryset=EmploymentHistory.objects.none())
    return render(request, 'judges/judge_manage.html', {'form': form, 'formset': formset, 'judge': None})

def judge_edit(request, judge_id):
    """Редактирует существующего судью."""
    judge = get_object_or_404(Judge, id=judge_id)
    EmploymentHistoryFormSet = modelformset_factory(EmploymentHistory, form=EmploymentHistoryForm, extra=1, can_delete=True)
    if request.method == 'POST':
        form = JudgeForm(request.POST, instance=judge)
        formset = EmploymentHistoryFormSet(request.POST, queryset=EmploymentHistory.objects.filter(judge=judge))
        if form.is_valid() and formset.is_valid():
            judge = form.save()
            for f in formset:
                if f.cleaned_data and not f.cleaned_data.get('DELETE', False):
                    history = f.save(commit=False)
                    history.judge = judge
                    history.save()
            for f in formset.deleted_forms:
                if f.instance.pk:
                    f.instance.delete()
            JudgeService.update_leading_judge_for_threads()
            messages.success(request, "Изменения успешно сохранены.")
            return redirect('judges:judges_list')
    else:
        form = JudgeForm(instance=judge)
        formset = EmploymentHistoryFormSet(queryset=EmploymentHistory.objects.filter(judge=judge))
    return render(request, 'judges/judge_manage.html', {'form': form, 'formset': formset, 'judge': judge})

def judge_delete(request, judge_id):
    """Удаляет судью."""
    judge = get_object_or_404(Judge, id=judge_id)
    if request.method == 'POST':
        judge.delete()
        JudgeService.update_leading_judge_for_threads()
        return redirect('judges:judges_list')
    return render(request, 'judges/judge_confirm_delete.html', {'judge': judge})

@csrf_protect
def employment_history_delete(request, pk):
    """Удаляет запись из истории приёма/увольнения."""
    history = get_object_or_404(EmploymentHistory, pk=pk)
    if request.method == "POST":
        history.delete()
        next_url = request.POST.get('next', reverse('judges:judge_edit', args=[history.judge.id]))
        return redirect(next_url)
    return redirect('judges:judges_list')
===== D:\Development\court_secretary\parser\__init__.py =====
===== D:\Development\court_secretary\parser\admin.py =====
from django.contrib import admin

# Register your models here.
===== D:\Development\court_secretary\parser\apps.py =====
from django.apps import AppConfig


class ParserConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'parser'
===== D:\Development\court_secretary\parser\base_parser.py =====
from abc import ABC, abstractmethod

class BaseParser(ABC):
    """Абстрактный базовый класс для парсеров."""
    @abstractmethod
    def parse(self, max_pages: int) -> None:
        """Парсит указанное количество страниц."""
        pass
===== D:\Development\court_secretary\parser\models.py =====
from django.db import models

# Create your models here.
===== D:\Development\court_secretary\parser\parser.py =====
import requests
from bs4 import BeautifulSoup
from django.utils import timezone
from django.db import transaction
from django.conf import settings
from web.models import ForumThread, ThreadMessage, ParseProgress
from .base_parser import BaseParser

class MessageExtractor:
    """Извлекает данные из сообщений форума."""
    @staticmethod
    def extract_messages(soup: BeautifulSoup, thread_obj: ForumThread) -> list:
        """Извлекает список сообщений из HTML."""
        messages = soup.select("article.message")
        result = []
        for msg in messages:
            msg_id = msg.get("id")
            msg_url = thread_obj.url + f"#{msg_id}" if msg_id else thread_obj.url

            author_elem = msg.select_one("h4.message-name a")
            content_elem = msg.select_one("div.message-userContent article")
            time_elem = msg.select_one("time.u-dt")

            author = author_elem.text.strip() if author_elem else "Unknown"
            content = MessageExtractor._extract_content(content_elem)
            posted_at = timezone.datetime.fromisoformat(time_elem["datetime"]) if time_elem else timezone.now()

            result.append({
                "url": msg_url,
                "author": author,
                "content": content,
                "posted_at": posted_at
            })
        return result

    @staticmethod
    def _extract_content(content_elem) -> str:
        """Извлекает содержимое сообщения."""
        if not content_elem:
            return "No content found"
        content_parts = []
        for elem in content_elem.children:
            if elem.name in ['p', 'div']:
                text = elem.get_text(strip=True)
                if text:
                    content_parts.append(text)
            elif elem.name == 'br':
                content_parts.append('\n')
            elif elem.string and elem.string.strip():
                content_parts.append(elem.string.strip())
        content = '\n'.join(part for part in content_parts if part).strip()
        return content or content_elem.get_text(strip=True).strip()

class ThreadParser:
    """Парсит отдельные треды форума."""
    def __init__(self, headers: dict):
        self.headers = headers

    def parse(self, thread_obj: ForumThread, progress: ParseProgress) -> None:
        """Парсит все страницы указанного треда."""
        page = 1
        new_messages_added = False
        while True:
            page_url = thread_obj.url if page == 1 else f"{thread_obj.url}page-{page}"
            try:
                response = requests.get(page_url, headers=self.headers, timeout=10)
                response.raise_for_status()
            except requests.RequestException as e:
                print(f"Failed to fetch page {page} of thread {thread_obj.url}: {e}")
                break

            soup = BeautifulSoup(response.text, 'html.parser')
            messages = MessageExtractor.extract_messages(soup, thread_obj)

            if not messages:
                print(f"No messages found on page {page} of thread {thread_obj.url}, stopping.")
                break

            with transaction.atomic():
                for msg_data in messages:
                    message, created = ThreadMessage.objects.get_or_create(
                        thread=thread_obj,
                        url=msg_data["url"],
                        defaults={
                            "author": msg_data["author"],
                            "content": msg_data["content"],
                            "posted_at": msg_data["posted_at"]
                        }
                    )
                    if created:
                        new_messages_added = True

            next_page = soup.select_one(".pageNav-jump--next")
            if not next_page:
                print(f"No next page found for thread {thread_obj.url}, stopping.")
                break
            page += 1

        if new_messages_added:
            thread_obj.last_parsed_at = timezone.now()
            thread_obj.save()
            print(f"Updated last_parsed_at for thread {thread_obj.url} to {thread_obj.last_parsed_at}")

        progress.processed_threads += 1
        progress.progress = (progress.processed_threads / progress.total_threads) * 100 if progress.total_threads > 0 else 0
        progress.save()
        print(f"Finished parse_thread for {thread_obj.url}")

class ForumParser(BaseParser):
    """Парсит форум целиком."""
    def __init__(self, headers: dict, judge_service):
        self.headers = headers
        self.thread_parser = ThreadParser(headers)
        self.judge_service = judge_service

    def parse(self, max_pages: int = 1) -> None:
        """Парсит форум на заданное количество страниц."""
        print(f"Starting parse_forum with max_pages={max_pages}...")
        progress, _ = ParseProgress.objects.get_or_create(pk=1, defaults={'status': 'running'})
        threads_to_parse = []

        for page in range(1, max_pages + 1):
            url = settings.FORUM_URL if page == 1 else f"{settings.FORUM_URL}page-{page}"
            print(f"Parsing page {page}: {url}")
            try:
                response = requests.get(url, headers=self.headers, timeout=10)
                response.raise_for_status()
            except requests.RequestException as e:
                print(f"Failed to fetch page {page} ({url}): {e}")
                break

            soup = BeautifulSoup(response.text, 'html.parser')
            threads = soup.select(".structItem--thread")
            print(f"Found {len(threads)} threads on page {page}")

            if not threads:
                print(f"No threads found on page {page}, stopping pagination.")
                break

            for thread in threads:
                title_elem = thread.select_one(".structItem-title")
                prefix = title_elem.select_one(".label")
                prefix_text = prefix.text.strip() if prefix else None

                title_link = title_elem.select_one("a[data-xf-init='preview-tooltip']")
                title = title_link.text.strip() if title_link else "Без названия"
                thread_url = "https://forum.gta5rp.com" + title_link["href"] if title_link else None

                time_elem = thread.select_one(".structItem-startDate time")
                created_at = timezone.datetime.fromisoformat(time_elem["datetime"]) if time_elem else timezone.now()

                if thread_url:
                    print(f"Processing thread: {title} ({thread_url}) with prefix: {prefix_text}")
                    with transaction.atomic():
                        thread_obj, created = ForumThread.objects.get_or_create(
                            url=thread_url,
                            defaults={
                                "title": title,
                                "prefix": prefix_text,
                                "created_at": created_at,
                                "last_parsed_at": timezone.now()
                            }
                        )
                    if created or not thread_obj.messages.exists():
                        threads_to_parse.append(thread_obj)

        progress.total_threads = len(threads_to_parse)
        progress.processed_threads = 0
        progress.progress = 0
        progress.status = 'running'
        progress.save()
        print(f"Total threads to parse: {progress.total_threads}")

        for thread_obj in threads_to_parse:
            self.thread_parser.parse(thread_obj, progress)

        self.judge_service.update_leading_judge_for_threads()
        progress.status = 'completed'
        progress.progress = 100
        progress.save()
        print("Finished parse_forum successfully")

def start_parse(max_pages: int = 1) -> None:
    """Запускает парсинг форума."""
    headers = {"User-Agent": settings.USER_AGENT}
    from judges.services import JudgeService
    parser = ForumParser(headers, JudgeService())
    parser.parse(max_pages)
===== D:\Development\court_secretary\parser\tests.py =====
from django.test import TestCase

# Create your tests here.
===== D:\Development\court_secretary\parser\utils.py =====
from .parser import start_parse

def run_parser_in_background(max_pages: int) -> None:
    start_parse(max_pages=max_pages)
===== D:\Development\court_secretary\parser\views.py =====
from django.shortcuts import render

# Create your views here.
===== D:\Development\court_secretary\summary\__init__.py =====
===== D:\Development\court_secretary\summary\admin.py =====
from django.contrib import admin

# Register your models here.
===== D:\Development\court_secretary\summary\apps.py =====
from django.apps import AppConfig


class SummaryConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'summary'
===== D:\Development\court_secretary\summary\models.py =====
from django.db import models

# Create your models here.
===== D:\Development\court_secretary\summary\tests.py =====
from django.test import TestCase

# Create your tests here.
===== D:\Development\court_secretary\summary\urls.py =====
from django.urls import path
from . import views

app_name = 'summary'

urlpatterns = [
    path('', views.summary_table, name='summary_table'),
]
===== D:\Development\court_secretary\summary\views.py =====
from django.shortcuts import render
from django.db.models import Q, Min, Max, Case, When, Value, BooleanField, F
from django.core.paginator import Paginator
from datetime import timedelta
from django.utils import timezone
from web.models import ForumThread
from judges.models import Judge
from court_secretary.utils.date_utils import parse_date

def summary_table(request):
    judge_filter = request.GET.get('judge', '')
    prefix_filter = request.GET.get('prefix', '')
    date_from = request.GET.get('date_from', '')
    date_to = request.GET.get('date_to', '')
    urgent_filter = request.GET.get('urgent', '')

    judges_list = Judge.objects.values_list('forum_account', flat=True)
    threads = ForumThread.objects.select_related().prefetch_related('messages').annotate(
        first_judge_msg=Min('messages__posted_at', filter=Q(messages__author__in=judges_list)),
        last_judge_msg=Max('messages__posted_at', filter=Q(messages__author__in=judges_list)),
        is_urgent=Case(
            When(
                Q(prefix__in=["Рассмотрено", "Отказано"]), then=Value(False)
            ),
            When(
                Q(first_judge_msg__isnull=True) & Q(created_at__lte=timezone.now() - timedelta(hours=50)),
                then=Value(True)
            ),
            When(
                Q(first_judge_msg__isnull=False) & Q(last_judge_msg__isnull=False) & 
                Q(last_judge_msg__gte=F('first_judge_msg') + timedelta(hours=120)),
                then=Value(True)
            ),
            default=Value(False),
            output_field=BooleanField()
        )
    )

    if judge_filter:
        threads = threads.filter(leading_judge=judge_filter)
    if prefix_filter:
        if prefix_filter == "no_prefix":
            threads = threads.filter(prefix__isnull=True)
        else:
            threads = threads.filter(prefix=prefix_filter)
    if date_from:
        try:
            threads = threads.filter(created_at__gte=parse_date(date_from))
        except ValueError:
            pass
    if date_to:
        try:
            date_to_obj = parse_date(date_to) + timedelta(days=1)
            threads = threads.filter(created_at__lt=date_to_obj)
        except ValueError:
            pass
    if urgent_filter:
        threads = threads.filter(is_urgent=True)

    threads = threads.order_by('-created_at')
    paginator = Paginator(threads, 100)  # 100 записей на страницу
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    judges = ForumThread.objects.exclude(leading_judge__isnull=True).values_list('leading_judge', flat=True).distinct()
    prefixes = ForumThread.objects.exclude(prefix__isnull=True).values_list('prefix', flat=True).distinct()

    today = timezone.now().date()
    last_21_days = [(today - timedelta(days=x)).strftime('%Y-%m-%d') for x in range(21)]

    thread_data = []
    for thread in page_obj:
        last_post = thread.messages.order_by('-posted_at').first()
        time_to_first_judge_message = None
        time_to_first_judge_class = None
        if thread.first_judge_msg:
            time_delta = thread.first_judge_msg - thread.created_at
            days = time_delta.days
            hours, remainder = divmod(time_delta.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            time_to_first_judge_message = f"{days} дн. {hours} ч. {minutes} мин."
            total_hours = days * 24 + hours + minutes / 60
            if total_hours >= 70:
                time_to_first_judge_class = "first-very-strong-indication"
            elif total_hours >= 60:
                time_to_first_judge_class = "first-strong-indication"

        trial_duration = None
        trial_duration_class = None
        if thread.first_judge_msg:
            end_time = timezone.now()
            if thread.prefix in ["Отказано", "Рассмотрено"] and thread.last_judge_msg:
                end_time = thread.last_judge_msg
            time_delta = end_time - thread.first_judge_msg
            days = time_delta.days
            hours, remainder = divmod(time_delta.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            trial_duration = f"{days} дн. {hours} ч. {minutes} мин."
            total_hours = days * 24 + hours + minutes / 60
            if total_hours >= 170:
                trial_duration_class = "trial-very-strong-indication"

        thread_data.append({
            'thread': thread,
            'last_post_date': last_post.posted_at if last_post else None,
            'time_to_first_judge_message': time_to_first_judge_message,
            'time_to_first_judge_class': time_to_first_judge_class,
            'trial_duration': trial_duration,
            'trial_duration_class': trial_duration_class,
        })

    return render(request, 'summary/summary_table.html', {
        'thread_data': thread_data,
        'page_obj': page_obj,
        'judges': judges,
        'prefixes': prefixes,
        'selected_judge': judge_filter,
        'selected_prefix': prefix_filter,
        'date_from': date_from,
        'date_to': date_to,
        'urgent_filter': urgent_filter,
        'last_21_days': last_21_days,
    })
===== D:\Development\court_secretary\web\__init__.py =====
===== D:\Development\court_secretary\web\admin.py =====
from django.contrib import admin

# Register your models here.
===== D:\Development\court_secretary\web\apps.py =====
from django.apps import AppConfig


class WebConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'web'
===== D:\Development\court_secretary\web\models.py =====
from django.db import models
from django.utils import timezone

class ForumThread(models.Model):
    url = models.URLField(unique=True)
    title = models.CharField(max_length=255)
    prefix = models.CharField(max_length=50, null=True, blank=True)
    created_at = models.DateTimeField(db_index=True)
    last_parsed_at = models.DateTimeField(null=True, blank=True)
    leading_judge = models.CharField(max_length=255, null=True, blank=True, verbose_name="Ведущий судья")

    def __str__(self):
        return self.title

    class Meta:
        indexes = [
            models.Index(fields=['created_at']),
        ]

class ThreadMessage(models.Model):
    thread = models.ForeignKey(ForumThread, related_name='messages', on_delete=models.CASCADE)
    url = models.URLField(unique=True)
    author = models.CharField(max_length=255)
    content = models.TextField()
    posted_at = models.DateTimeField(db_index=True)

    def __str__(self):
        return f"{self.author}: {self.content[:50]}"

    class Meta:
        indexes = [
            models.Index(fields=['posted_at']),
        ]

class ParseProgress(models.Model):
    processed_threads = models.IntegerField(default=0)
    total_threads = models.IntegerField(default=0)
    progress = models.FloatField(default=0.0)
    status = models.CharField(max_length=50, default='not_started')
    auto_parse_enabled = models.BooleanField(default=False, verbose_name="Автоматический парсинг включен")
    auto_parse_interval = models.PositiveIntegerField(default=60, verbose_name="Интервал (минуты)")
    auto_parse_pages = models.PositiveIntegerField(default=1, verbose_name="Количество страниц")
    next_parse_time = models.DateTimeField(null=True, blank=True, verbose_name="Время следующего запуска")

    def __str__(self):
        return f"Progress: {self.progress}%"

    def update_next_parse_time(self):
        """Обновляет время следующего запуска."""
        if self.auto_parse_enabled:
            self.next_parse_time = timezone.now() + timezone.timedelta(minutes=self.auto_parse_interval)
            self.save()
===== D:\Development\court_secretary\web\tasks.py =====
from celery import shared_task
from django.utils import timezone
from web.models import ParseProgress
from parser.parser import start_parse

@shared_task
def auto_parse_task():
    progress = ParseProgress.objects.first()
    if progress and progress.auto_parse_enabled and progress.status != 'running':
        start_parse(max_pages=progress.auto_parse_pages)
        progress.update_next_parse_time()
===== D:\Development\court_secretary\web\tests.py =====
from django.test import TestCase

# Create your tests here.
===== D:\Development\court_secretary\web\urls.py =====
from django.urls import path
from . import views

app_name = 'web'

urlpatterns = [
    path('', views.index, name='index'),
    path('stats/', views.stats, name='stats'),
    path('thread/<int:thread_id>/', views.thread_detail, name='thread_detail'),
    path('parse/', views.trigger_parse, name='trigger_parse'),
]
===== D:\Development\court_secretary\web\views.py =====
from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse
from django.db.models import Count
from web.models import ForumThread, ParseProgress
from parser.parser import start_parse
from court_secretary.celery import app as celery_app  # Импортируем приложение Celery
from django_celery_beat.models import PeriodicTask, IntervalSchedule

def index(request):
    print("Rendering index page")
    return render(request, 'web/index.html')

def stats(request):
    print("Rendering stats page")
    threads = ForumThread.objects.annotate(message_count=Count('messages')).order_by('-created_at')
    total_messages = sum(t.message_count for t in threads)
    print(f"Found {threads.count()} threads, total messages: {total_messages}")
    return render(request, 'web/stats.html', {'threads': threads, 'total_messages': total_messages})

def trigger_parse(request):
    progress = ParseProgress.objects.first()
    if not progress:
        progress = ParseProgress.objects.create()

    if request.method == 'POST':
        action = request.POST.get('action')
        
        if action == 'start_parse':
            max_pages = int(request.POST.get('max_pages', 1))
            start_parse(max_pages=max_pages)
            progress.update_next_parse_time()
            return redirect('web:trigger_parse')
        
        elif action == 'update_auto_parse':
            auto_enabled = request.POST.get('auto_parse_enabled') == 'on'
            interval = int(request.POST.get('auto_parse_interval', 60))
            pages = int(request.POST.get('auto_parse_pages', 1))
            progress.auto_parse_enabled = auto_enabled
            progress.auto_parse_interval = interval
            progress.auto_parse_pages = pages
            if auto_enabled:
                # Обновляем задачу в Celery Beat
                schedule, _ = IntervalSchedule.objects.get_or_create(every=interval, period=IntervalSchedule.MINUTES)
                task, _ = PeriodicTask.objects.get_or_create(name='auto-parse', defaults={'task': 'web.tasks.auto_parse_task'})
                task.interval = schedule
                task.enabled = True
                task.save()
                progress.update_next_parse_time()
            else:
                # Отключаем задачу
                PeriodicTask.objects.filter(name='auto-parse').update(enabled=False)
                progress.next_parse_time = None
            progress.save()
            return redirect('web:trigger_parse')
        
        elif action == 'stop_auto_parse':
            progress.auto_parse_enabled = False
            progress.status = 'stopped'
            progress.next_parse_time = None
            PeriodicTask.objects.filter(name='auto-parse').update(enabled=False)
            # Если нужно отозвать запущенные задачи (опционально)
            # task_id = PeriodicTask.objects.filter(name='auto-parse').first().task
            # if task_id:
            #     celery_app.control.revoke(task_id, terminate=True)
            progress.save()
            return redirect('web:trigger_parse')

    return render(request, 'web/parse.html', {'progress': progress})

def thread_detail(request, thread_id):
    print(f"Rendering thread detail page for thread_id={thread_id}")
    thread = get_object_or_404(ForumThread, id=thread_id)
    messages = thread.messages.all().order_by('posted_at')
    return render(request, 'web/thread_detail.html', {'thread': thread, 'messages': messages})
===== D:\Development\court_secretary\manage.py =====
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'court_secretary.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
